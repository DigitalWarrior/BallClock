#include <WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <Timezone.h>

struct Config {
    const char* ssid = "YOUR_WIFI_SSID";
    const char* password = "YOUR_WIFI_PASSWORD";
    const char* ntpServer = "132.163.96.1"; // NIST Internet Time Service update to you local one. 
    const long gmtOffset_sec = 0;
    
    TimeChangeRule EDT = {"EDT", Second, Sun, Mar, 2, -240};
    TimeChangeRule EST = {"EST", First, Sun, Nov, 2, -300};
    
    const unsigned long ntpUpdateInterval = 3600000;
    const unsigned long timeDisplayInterval = 1000;
    
    const struct {
        const int IN1 = 2;
        const int IN2 = 3;
        const int IN3 = 4;
        const int IN4 = 5;
        const int stepsPerRevolution = 2048;
        const int revolutionsPerMinute = 2;
        const int numSteps = 8;
    } motor;
    
    const int statusLed = 13;
    const int ntpStatusLed = 12;
} config;

class StepperMotor {
private:
    const int stepSequence[8][4] = {
        {1, 0, 0, 0}, {1, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 1, 0},
        {0, 0, 1, 0}, {0, 0, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 1}
    };
    int currentStep = 0;
    unsigned long lastStepTime = 0;
    const int stepDelay;

public:
    StepperMotor() : stepDelay(60000 / (config.motor.stepsPerRevolution * config.motor.revolutionsPerMinute)) {
        pinMode(config.motor.IN1, OUTPUT);
        pinMode(config.motor.IN2, OUTPUT);
        pinMode(config.motor.IN3, OUTPUT);
        pinMode(config.motor.IN4, OUTPUT);
    }

    void step() {
        if (millis() - lastStepTime >= stepDelay) {
            digitalWrite(config.motor.IN1, stepSequence[currentStep][0]);
            digitalWrite(config.motor.IN2, stepSequence[currentStep][1]);
            digitalWrite(config.motor.IN3, stepSequence[currentStep][2]);
            digitalWrite(config.motor.IN4, stepSequence[currentStep][3]);
            
            currentStep = (currentStep + 1) % config.motor.numSteps;
            lastStepTime = millis();
        }
    }
};

class WiFiManager {
private:
    unsigned long lastWiFiCheck = 0;
    const unsigned long checkInterval = 30000;
    bool isEnabled = true;

public:
    void disable() { 
        isEnabled = false; 
        Serial.println("WiFi disabled");
    }
    
    void enable() { 
        isEnabled = true; 
        Serial.println("WiFi enabled");
    }
    
    bool connect() {
        if (!isEnabled) return false;
        
        Serial.print("Connecting to WiFi");
        WiFi.begin(config.ssid, config.password);
        
        int attempts = 0;
        while (WiFi.status() != WL_CONNECTED && attempts < 20) {
            delay(500);
            Serial.print(".");
            attempts++;
        }
        
        if (WiFi.status() == WL_CONNECTED) {
            Serial.println("\nWiFi connected successfully");
            Serial.print("IP Address: ");
            Serial.println(WiFi.localIP());
            return true;
        } else {
            Serial.println("\nWiFi connection failed");
            return false;
        }
    }
    
    bool checkConnection() {
        if (!isEnabled) return false;
        
        if (millis() - lastWiFiCheck >= checkInterval) {
            if (WiFi.status() != WL_CONNECTED) {
                Serial.println("WiFi connection lost. Attempting to reconnect...");
                return connect();
            }
            lastWiFiCheck = millis();
        }
        return WiFi.status() == WL_CONNECTED;
    }
};

class TimeManager {
private:
    WiFiUDP ntpUDP;
    NTPClient timeClient;
    Timezone timezone;
    unsigned long lastUpdate = 0;
    unsigned long lastSyncMillis = 0;
    unsigned long lastTimeDisplay = 0;
    unsigned long lastNtpLedUpdate = 0;
    bool hasInitialSync = false;
    bool usingNTP = false;
    bool lastNtpUpdateSuccess = false;
    time_t localTime;

public:
    TimeManager() : 
        timeClient(ntpUDP, config.ntpServer, config.gmtOffset_sec),
        timezone(config.EDT, config.EST) {}
    
    void begin() {
        timeClient.begin();
        Serial.println("Time manager initialized");
    }

    bool syncNTP() {
        Serial.println("Connecting to NTP server...");
        
        if (timeClient.update()) {
            time_t utc = timeClient.getEpochTime();
            localTime = timezone.toLocal(utc);
            lastUpdate = millis();
            lastSyncMillis = millis();
            hasInitialSync = true;
            usingNTP = true;
            lastNtpUpdateSuccess = true;
            Serial.println("NTP synchronization successful");
            return true;
        }
        
        lastNtpUpdateSuccess = false;
        Serial.println("NTP synchronization failed");
        return false;
    }
    
    void updateNtpLed() {
        static bool ledState = false;
        unsigned long currentMillis = millis();
        
        if (lastNtpUpdateSuccess) {
            // Blink every second when NTP sync successful
            if (currentMillis - lastNtpLedUpdate >= 1000) {
                ledState = !ledState;
                digitalWrite(config.ntpStatusLed, ledState);
                lastNtpLedUpdate = currentMillis;
            }
        } else {
            // Fast blink every 0.2 seconds when NTP failed
            if (currentMillis - lastNtpLedUpdate >= 200) {
                ledState = !ledState;
                digitalWrite(config.ntpStatusLed, ledState);
                lastNtpLedUpdate = currentMillis;
            }
        }
    }
    
    bool update(bool wifiConnected) {
        if (wifiConnected) {
            if (millis() - lastUpdate >= config.ntpUpdateInterval) {
                syncNTP();
            }
        } else if (hasInitialSync) {
            time_t utc = timeClient.getEpochTime() + ((millis() - lastSyncMillis) / 1000);
            localTime = timezone.toLocal(utc);
            lastSyncMillis = millis();
            usingNTP = false;
            return true;
        }

        updateNtpLed();
        displayTime();
        return hasInitialSync;
    }
    
    void displayTime() {
        if (millis() - lastTimeDisplay >= config.timeDisplayInterval) {
            time_t t = timeClient.getEpochTime();
            int hours = (t % 86400L) / 3600;
            int minutes = (t % 3600) / 60;
            int seconds = t % 60;
            
            char timeStr[40];
            sprintf(timeStr, "Time: %02d:%02d:%02d [%s]", 
                hours, minutes, seconds, 
                usingNTP ? "NTP" : "Internal");
            Serial.println(timeStr);
            
            lastTimeDisplay = millis();
        }
    }
    
    bool isTimeValid() {
        return hasInitialSync;
    }
    
    bool isDST() {
        return timezone.locIsDST(localTime);
    }
};

WiFiManager wifiManager;
TimeManager timeManager;
StepperMotor motor;

void indicateStatus(bool wifiConnected, bool timeValid) {
    static unsigned long lastBlink = 0;
    static bool ledState = false;
    unsigned long currentMillis = millis();
    
    if (wifiConnected && timeValid) {
        if (timeManager.isDST()) {
            // Blink twice per second for DST
            if (currentMillis - lastBlink >= 500) {
                ledState = !ledState;
                digitalWrite(config.statusLed, ledState);
                lastBlink = currentMillis;
            }
        } else {
            // Solid ON for standard time
            digitalWrite(config.statusLed, HIGH);
        }
    } else {
        // Blink every 2 seconds when not connected
        if (currentMillis - lastBlink >= 2000) {
            ledState = !ledState;
            digitalWrite(config.statusLed, ledState);
            lastBlink = currentMillis;
        }
    }
}

void setup() {
    Serial.begin(115200);
    Serial.println("ESP32-C3 Stepper Motor Controller booted successfully");
    
    pinMode(config.statusLed, OUTPUT);
    pinMode(config.ntpStatusLed, OUTPUT);
    digitalWrite(config.ntpStatusLed, LOW);
    
    if (wifiManager.connect()) {
        timeManager.syncNTP();
    } else {
        wifiManager.disable();
    }
    
    timeManager.begin();
}

void loop() {
    bool wifiConnected = wifiManager.checkConnection();
    bool timeValid = timeManager.update(wifiConnected);
    
    indicateStatus(wifiConnected, timeValid);
    motor.step();
}